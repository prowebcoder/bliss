{% schema %}
{
  "name": "Highlight Text with Image",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Highlighted Text"
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text",
      "default": "<p>This is a sample text that will be highlighted word by word.</p>"
    },
    {
      "type": "image_picker",
      "id": "image",
      "label": "Image"
    },
    {
      "type": "color",
      "id": "highlight_color",
      "label": "Highlight Color",
      "default": "#FFD700"
    }
  ],
  "presets": [
    {
      "name": "Highlight Text with Image",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<div class="highlight-section">
  <div class="highlight-content">
    <h2>{{ section.settings.heading }}</h2>
    <div class="highlight-text">
      {% assign words = section.settings.text | strip_html | split: ' ' %}
      {% for word in words %}
        <span class="highlight-word">{{ word }}</span>
      {% endfor %}
    </div>
  </div>
  <div class="highlight-image">
    {% if section.settings.image %}
      <img src="{{ section.settings.image | img_url: '800x' }}" alt="{{ section.settings.image.alt }}">
    {% endif %}
  </div>
</div>

<style>
  .highlight-section {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 50px 20px;
  }

  .highlight-content {
    max-width: 50%;
  }

  .highlight-text {
    font-size: 24px;
    line-height: 1.6;
  }

  .highlight-word {
    opacity: 0.3;
    transition: opacity 0.5s ease, color 0.5s ease;
  }

  .highlight-word.active {
    opacity: 1;
    color: {{ section.settings.highlight_color }};
  }

  .highlight-image {
    max-width: 40%;
  }

  .highlight-image img {
    width: 100%;
    height: auto;
    border-radius: 10px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const words = document.querySelectorAll('.highlight-word');
    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.5
    };

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.classList.add('active');
          }, index * 100); // Delay each word highlight
          observer.unobserve(entry.target);
        }
      });
    }, options);

    words.forEach(word => {
      observer.observe(word);
    });
  });
</script>